from functools import reduce
m_t = [[2313295559, 2344230739], [4007313923, 2745271909], [2498564963, 4183969903], [3654191791, 2973195941], [3052643623, 2252378341], [2338919069, 3912721867], [3869077391, 4010812739], [3211966811, 3106916633], [3143566513, 3604686227], [2936658199, 3872050241], [4142272367, 3240053941], [4150360759, 4201278353], [3026002823, 2213112259], [2987722163, 3343210307], [3418036117, 3316802989], [3596431877, 4017342281], [3171809437, 3510358333], [2448000083, 2461980863], [4184557381, 2335586767], [3788472001, 4153820351], [3234612229, 3264436181], [3683326447, 2990747597], [3222635191, 3761980403], [2153701031, 3719482141], [3133907617, 3841399673], [2519951299, 3133157519], [3010582873, 3398854673], [2470341199, 2236280707], [3082512019, 3206342159], [3141476599, 3762573797], [2512361417, 3560214883], [2358177901, 3926104799]]
a_t = [[876960323, 345041702], [1913986393, 967659859], [1240962272, 749996733], [2159989078, 2237450287], [2416677018, 1668469757], [892176798, 696368306], [666274813, 1688395066], [1035301533, 2152732374], [159043299, 399022178], [2671772329, 160844805], [3676485388, 3122507850], [3221645141, 188705017], [2308522744, 168875048], [593153506, 108648589], [25058903, 2864152916], [1603412066, 175289597], [1409332826, 2028646373], [1131000183, 428926147], [2659618018, 1554755348], [1174209620, 2198904552], [890890970, 2088997404], [159632299, 1611511388], [1117506405, 2227885521], [2065997530, 2118491244], [1878849425, 244805354], [1077589763, 2058058854], [1216673231, 776702324], [1655529233, 109746328], [2135785122, 3063849622], [600685797, 2514136554], [2247877994, 2889102158], [651236227, 3244392318]]
b_t = [[3994000889, 3303489197], [3499839727, 2675281451], [3352812299, 2646485609], [3817485611, 3391094783], [4045747087, 4127122171], [3143127511, 2577091261], [2714063369, 4106883899], [3907153829, 3274562113], [3714679547, 4234104209], [2684582587, 2702424541], [3375565043, 2487806521], [3003085741, 2260771427], [2332853287, 3787552541], [3460789313, 3899604473], [3966100157, 3951034697], [2743044893, 3345191219], [3413830621, 3270299629], [4279647193, 2700171413], [2608989961, 2772048683], [2633956433, 2818150799], [4055361941, 3037982107], [2458028579, 4232468549], [3844809889, 2498586073], [2527612667, 2351524951], [2634870943, 3384897767], [3308246441, 2250049211], [3506080351, 2262150767], [3498739457, 3834254531], [3525521063, 4283871763], [2381321351, 2514082789], [2170714577, 3714256181], [3927319861, 2598614171]]

def chinese_remainder(m, a):
    sum = 0
    prod = reduce(lambda acc, b: acc*b, m)
    for n_i, a_i in zip(m, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod
 
def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1
 
def ehcf(a,b):
    # Initialization
    p1 = 1
    q1 = 0
    h1 = a
    p2 = 0
    q2 = 1
    h2 = b
    
    # Loop
    while h2 != 0:
        r = h1//h2
        p3 = p1 - r*p2
        q3 = q1 - r*q2
        h3 = h1 - r*h2
        p1 = p2
        q1 = q2
        h1 = h2
        p2 = p3
        q2 = q3
        h2 = h3
    # Output
    return [p1, q1, h1]


def solve(m, a , b):
    _a0 = ehcf(b[0],m[0])[0] * a[0] % m[0]
    _a1 = ehcf(b[1],m[1])[0] * a[1] % m[1]
    _a = [_a0,_a1]
    return chinese_remainder(m,_a)
flag = ""
for m,a,b in zip(m_t,a_t,b_t):
    c = solve(m,a,b)
    flag += c.to_bytes(4,'big').decode()
print(flag)